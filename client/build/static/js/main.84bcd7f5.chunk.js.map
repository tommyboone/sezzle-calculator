{"version":3,"sources":["Components/Calculator/Calculator.js","Components/Calculator/Keypad/KeypadRow/KeypadRow.js","Components/Button/Button.js","Components/Button/LargeButton/LargeButton.js","Components/Button/ClearButton/ClearButton.js","Components/Calculator/Keypad/Keypad.js","Components/Calculator/Screen/ResultScreen/ResultScreen.js","Components/Calculator/Screen/ComputationScreen/ComputationScreen.js","Components/Calculator/Screen/Screen.js","utils/API.js","Components/Calculator/Screen/ResultScreen/ResultsTable/TableItem.js","Components/Calculator/Screen/ResultScreen/ResultsTable/ResultsTable.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","data","API","save","then","console","log","setState","error","alert","trim","substr","length","this","className","React","Component","keypadRow","props","children","button","classes","type","push","join","onClick","LargeButton","Button","ClearButton","keypad","KeypadRow","resultScreen","computationScreen","screen","ResultScreen","ComputationScreen","limit","axios","get","post","TableItem","item","response","catch","err","map","resultstable","app","ResultsTable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.84bcd7f5.chunk.js","sourcesContent":["// Calculator.js\nimport React from \"react\";\nimport Screen from \"./Screen/Screen\";\nimport Keypad from \"./Keypad/Keypad\";\nimport API from \"../../utils/API\";\n\nclass Calculator extends React.Component {\n  state = {\n    equation: \"\",\n    result: 0,\n  };\n  onButtonPress = (event) => {\n    let equation = this.state.equation;\n    const pressedButton = event.target.innerHTML;\n    if (pressedButton === \"C\") return this.clear();\n    else if (\n      (pressedButton >= \"0\" && pressedButton <= \"9\") ||\n      pressedButton === \".\"\n    )\n      equation += pressedButton;\n    else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(pressedButton) !== -1)\n      equation += \" \" + pressedButton + \" \";\n    else if (pressedButton === \"=\") {\n      try {\n        const evalResult = eval(equation);\n        const result = Number.isInteger(evalResult)\n          ? evalResult\n          : evalResult.toFixed(2);\n      \n        let data = {equation, result}    \n        API.save(data).then(console.log(data));\n\n        this.setState({ result });\n      } catch (error) {\n        alert(\"Invalid Mathematical Equation\");\n      }\n    } else {\n      equation = equation.trim();\n      equation = equation.substr(0, equation.length - 1);\n    }\n\n    this.setState({ equation: equation });\n  };\n  clear() {\n    this.setState({ equation: \"\", result: 0 });\n  }\n  render() {\n    return (\n      <main className=\"calculator\">\n        <Screen equation={this.state.equation} result={this.state.result} />\n        <Keypad onButtonPress={this.onButtonPress} />\n      </main>\n    );\n  }\n}\nexport default Calculator;\n","// KeypadRow.js\nimport React from 'react';\nconst keypadRow = (props) => (\n  <div className=\"keypad__row\">\n    {props.children}\n  </div>\n);\nexport default keypadRow;","import React from \"react\";\n\nconst button = (props) => {\n  const classes = [\"btn\"];\n\n  if (typeof props !== \"undefined\" && typeof props.type !== \"undefined\")\n    classes.push(\"btn--\" + props.type);\n\n  return (\n    <button className={classes.join(\" \")} onClick={props.onButtonPress}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default button;\n","  \nimport React from 'react';\n\nimport Button from '../Button';\n\nconst LargeButton = (props) => {\n\n\n    return(\n        <Button type='large' {...props}  />\n    )\n    \n}\n\nexport default LargeButton;","import React from 'react';\n\nimport Button from '../Button';\n\nconst ClearButton = (props) => {\n\n    \n\n    return(\n        <Button  {...props} />\n    )\n    \n}\n\nexport default ClearButton;","import React from 'react';\n\nimport KeypadRow from './KeypadRow/KeypadRow';\nimport Button from '../../../Components/Button/Button';\nimport LargeButton from '../../../Components/Button/LargeButton/LargeButton';\nimport ClearButton from '../../../Components/Button/ClearButton/ClearButton'\n\nconst keypad = props => (\n    <section className=\"keypad\">\n        {/* row #1 */}\n        <KeypadRow>\n            <ClearButton type=\"primary\" onButtonPress={props.onButtonPress}>C</ClearButton>\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>%</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\n        </KeypadRow>\n\n        {/* row #2 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>7</Button>\n            <Button onButtonPress={props.onButtonPress}>8</Button>\n            <Button onButtonPress={props.onButtonPress}>9</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\n        </KeypadRow>\n\n        {/* row #3 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>4</Button>\n            <Button onButtonPress={props.onButtonPress}>5</Button>\n            <Button onButtonPress={props.onButtonPress}>6</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\n        </KeypadRow>\n\n        {/* row #4 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>1</Button>\n            <Button onButtonPress={props.onButtonPress}>2</Button>\n            <Button onButtonPress={props.onButtonPress}>3</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\n        </KeypadRow>\n\n        {/* row #5 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>0</Button>\n            <Button onButtonPress={props.onButtonPress}>.</Button>\n            <LargeButton onButtonPress={props.onButtonPress}>=</LargeButton>\n        </KeypadRow>\n    </section>\n);\n\nexport default keypad;","// ResultScreen.js\nimport React from 'react';\n\nconst resultScreen = (props) => (\n  <div className=\"result-screen\">\n    {props.children}\n  </div>\n);\nexport default resultScreen;","// ComputationScreen.js\nimport React from 'react';\nconst computationScreen = (props) => (\n  <div className=\"computation-screen\">\n    {props.children}\n  </div>\n);\nexport default computationScreen;","import React from \"react\";\nimport ResultScreen from \"./ResultScreen/ResultScreen\";\nimport ComputationScreen from \"./ComputationScreen/ComputationScreen\";\nconst screen = (props) => (\n  <section className=\"screen\">\n    <ResultScreen>{props.result}</ResultScreen>\n    <ComputationScreen>{props.equation}</ComputationScreen>\n   \n  </section>\n);\nexport default screen;\n","import axios from 'axios';\n\nexport default{\n \n    limit: function(){\n        return axios.get('api/calculator/save');\n    },\n    save: function(data){\n        \n        return axios.post('api/calculator/save', data)\n    }\n\n}","import React, { Component } from 'react';\nimport API from '../../../../../utils/API';\n\n\nclass TableItem extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            item: []\n        }\n    };\n\n    componentDidMount(){\n        API.limit().then((response) => {\n            this.setState({item: response.data})\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n    render(){\n        const { item } = this.state\n\n        return item.map((item) => ( \n           \n            <li className=\"table-item\">\n                {item.equation} = {item.result}\n            </li>\n        )\n\n        )\n    }\n}\n\n// const TableItem = () => {\n//     return(\n//     <li className=\"table-item\">\n\n//     </li>\n//     )\n// }\n\nexport default TableItem;","import React from \"react\";\nimport TableItem from \"./TableItem\";\n\nconst resultstable = () => {\n  return (\n    <main className=\"results-table\">\n      <ol>\n        <TableItem />\n      </ol>\n    </main>\n  );\n};\nexport default resultstable;\n","import React from \"react\";\nimport \"./styles/styles.css\";\nimport Calculator from \"./Components/Calculator/Calculator\";\nimport ResultsTable from './Components/Calculator/Screen/ResultScreen/ResultsTable/ResultsTable'\n\n\n\n\n\nconst app = () => (\n  <div className=\"app\">\n    <Calculator />\n    <ResultsTable />\n  </div>\n);\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}